{"version":3,"sources":["Components/TypingBox.jsx","App.js","index.js"],"names":["TypingBox","_useState","useState","randomWords","_useState2","_slicedToArray","words","setWords","_useState3","Array","fill","_useState4","acc","setAcc","_useState5","_useState6","text","setText","_useState7","_useState8","index","setIndex","_useState9","_useState10","correct","setCorrect","_useState11","_useState12","total","setTotal","_useState13","_useState14","result","setResult","_useState15","_useState16","start","setStart","_useState17","_useState18","time","setTime","_useState19","_useState20","highScore","setHighScore","_useState21","_useState22","keyCount","setKeyCount","_useState23","_useState24","incorrect","setIncorrect","checkText","event","length","target","value","typedWord","trim","currentWord","temp","_toConsumableArray","newWords","concat","generateNewWords","chooseColor","i","useEffect","timerId","setInterval","prevTime","clearInterval","timeInMinutes","wpm","Math","floor","handleTestEnd","prevCount","accuracyPercentage","_jsxs","className","children","_jsx","toFixed","toString","padStart","onClick","map","v","style","color","disabled","onChange","ev","placeholder","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.78733f5b.chunk.js","sourcesContent":["import randomWords from \"random-words\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const TypingBox = () => {\r\n  const [words, setWords] = useState(randomWords(8));\r\n  const [acc, setAcc] = useState(new Array(50).fill(0));\r\n  const [text, setText] = useState(\"\");\r\n  const [index, setIndex] = useState(0);\r\n  const [correct, setCorrect] = useState(0);\r\n  const [total, setTotal] = useState(0);\r\n  const [result, setResult] = useState(\"\");\r\n  const [start, setStart] = useState(false);\r\n  const [time, setTime] = useState(300);\r\n  const [highScore, setHighScore] = useState(0);\r\n  const [keyCount, setKeyCount] = useState(0);\r\n  const [incorrect, setIncorrect] = useState(false);\r\n\r\n  const practiceDuration = 300; // 5 minutes in seconds\r\n\r\n  useEffect(() => {\r\n    let timerId;\r\n\r\n    if (start) {\r\n      timerId = setInterval(() => {\r\n        setTime((prevTime) => prevTime - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if (time === 0) {\r\n      setStart(false);\r\n      clearInterval(timerId);\r\n      handleTestEnd();\r\n    }\r\n\r\n    return () => clearInterval(timerId);\r\n  }, [start, time]);\r\n\r\n  useEffect(() => {\r\n    if (start && text.length > 0) {\r\n      setKeyCount((prevCount) => prevCount + 1);\r\n    }\r\n  }, [text, start]);\r\n\r\n  function handleTestEnd() {\r\n    const timeInMinutes = (practiceDuration - time) / 60;\r\n    const wpm = Math.floor(correct / timeInMinutes);\r\n    setResult(wpm + \" WPM\");\r\n    if (wpm > highScore) {\r\n      setHighScore(wpm);\r\n    }\r\n  }\r\n\r\n  function checkText(event) {\r\n    if (index >= words.length) {\r\n      return;\r\n    }\r\n\r\n    if (start === false && event.target.value.length === 1) {\r\n      setStart(true);\r\n    }\r\n\r\n    if (event.target.value[event.target.value.length - 1] === \" \") {\r\n      const typedWord = event.target.value.trim();\r\n      const currentWord = words[index];\r\n\r\n      setTotal(total + 1);\r\n      let temp = [...acc];\r\n      if (typedWord === currentWord) {\r\n        setCorrect(correct + 1);\r\n        temp[index] = 1;\r\n        setIncorrect(false);\r\n      } else {\r\n        temp[index] = -1;\r\n        setIncorrect(true);\r\n      }\r\n      setAcc(temp);\r\n\r\n      if (index === words.length - 1) {\r\n        generateNewWords();\r\n      }\r\n      setText(\"\");\r\n      setIndex(index + 1);\r\n    } else {\r\n      setText(event.target.value);\r\n    }\r\n  }\r\n\r\n  function generateNewWords() {\r\n    const newWords = randomWords(8); // change the words in one time\r\n    setWords([...words, ...newWords]); // adding new word ubtil the timer end\r\n  }\r\n\r\n  function reset() {\r\n    const newWords = randomWords(8); // change the words in one time\r\n    setWords(newWords);\r\n    setText(\"\");\r\n    setIndex(0);\r\n    setCorrect(0);\r\n    setResult(\"\");\r\n    setStart(false);\r\n    setTotal(0);\r\n    setTime(practiceDuration);\r\n    setAcc(new Array(50).fill(0));\r\n    setKeyCount(0);\r\n    setIncorrect(false);\r\n  }\r\n\r\n  function chooseColor(i) {\r\n    if (i === index) {\r\n      return \"yellow\";\r\n    }\r\n    if (acc[i] === -1) {\r\n      return \"red\";\r\n    }\r\n    if (acc[i] === 1) {\r\n      return \"green\";\r\n    }\r\n    return \"white\";\r\n  }\r\n\r\n  const accuracyPercentage = (correct / words.length) * 100 || 0; // count only correct words accuracy\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"box\">\r\n        <h1>Typing Test</h1>\r\n\r\n        {incorrect && <h3 className=\"feedback\">Incorrect word ‚ùó</h3>}\r\n        <div className=\"textMain\">\r\n          <h2 className=\"text\">High Score: {highScore} WPM</h2>\r\n          <h2 className=\"text\">Correct: {correct} </h2>\r\n          <h2 className=\"text\">Accuracy: {accuracyPercentage.toFixed(2)}%</h2>\r\n          <h2 className=\"text\">\r\n            Time Remaining:{\" \"}\r\n            {Math.floor(time / 60)\r\n              .toString()\r\n              .padStart(2, \"0\")}\r\n            :{(time % 60).toString().padStart(2, \"0\")}\r\n          </h2>\r\n        </div>\r\n\r\n        {result && <h2 className=\"result\">{result}</h2>}\r\n        <button className=\"button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"word_input_con\">\r\n        <div className=\"text-box\">\r\n          {words.map((v, i) => (\r\n            <div key={i} className=\"word\" style={{ color: chooseColor(i) }}>\r\n              {v}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <input\r\n          disabled={time === 0}\r\n          value={text}\r\n          onChange={(ev) => checkText(ev)}\r\n          className={incorrect ? \"incorrect\" : \"\"}\r\n          placeholder=\"Start your practice\"\r\n        />\r\n      </div>\r\n\r\n      <h3 className=\"key-count\">Key Count: {keyCount}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import \"./styles.css\";\nimport { TypingBox } from \"./Components/TypingBox\";\nexport default function App() {\n  return (\n    <div>\n      <TypingBox />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}